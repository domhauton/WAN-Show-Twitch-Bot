buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.junit.platform', name: 'junit-platform-gradle-plugin', version: '1.0.1'
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'org.junit.platform.gradle.plugin'

project.ext {
    log4jVersion = "2.9.1"
    luceneVersion = "6.6.0"
    jacksonVersion = "2.9.2"
    guavaVersion = "23.2-jre"
    jodaTimeVersion = "2.9.9"
    commons4Version = "4.1"
    bitlyVersion = "2.0.0"
    pircBotVersion = "1.5.0"

    junitPlatformVersion = "1.0.1"
    junitJupiterVersion = "5.0.1"
    mockitoVersion = "2.11.0"
}

group 'com.domhauton.wanbot'

sourceCompatibility = 1.8

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs += '-parameters'
}

junitPlatform {
    platformVersion junitPlatformVersion
    filters {
        engines {
            include 'junit-jupiter'
        }
        tags {
            // include 'fast'
            exclude 'slow'
        }
    }
    reportsDir file('build/test-results')

    enableStandardTestTask false
}

dependencies {
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4jVersion
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jacksonVersion
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion
    // https://mvnrepository.com/artifact/com.google.guava/guava
    compile group: 'com.google.guava', name: 'guava', version: guavaVersion
    // https://mvnrepository.com/artifact/joda-time/joda-time
    compile group: 'joda-time', name: 'joda-time', version: jodaTimeVersion
    // https://mvnrepository.com/artifact/org.apache.commons/commons-collections4
    compile group: 'org.apache.commons', name: 'commons-collections4', version: commons4Version
    // https://mvnrepository.com/artifact/com.rosaloves/bitlyj
    compile group: 'com.rosaloves', name: 'bitlyj', version: bitlyVersion
    // https://mvnrepository.com/artifact/pircbot/pircbot
    compile group: 'pircbot', name: 'pircbot', version: pircBotVersion
    // https://mvnrepository.com/artifact/org.apache.lucene/lucene-core
    compile group: 'org.apache.lucene', name: 'lucene-core', version: luceneVersion
    // https://mvnrepository.com/artifact/org.apache.lucene/lucene-facet
    compile group: 'org.apache.lucene', name: 'lucene-facet', version: luceneVersion
}

dependencies {
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitJupiterVersion
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitJupiterVersion
    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
}

// Copy all libs to build directory for docker image generation

task copyToLib(type: Copy) {
    into "$buildDir/output/libs"
    from configurations.runtime
}

build.dependsOn(copyToLib)

// Configure jacoco to correctly parse junit jupiter test results

afterEvaluate {
    def junitPlatformTestTask = (JavaExec) project.tasks.getByName('junitPlatformTest')

    jacoco {
        applyTo(junitPlatformTestTask)
    }

    project.task(type: JacocoReport, "jacocoJupTestReport") {
        executionData(junitPlatformTestTask)
        sourceSets(sourceSets.main)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)

        reports {
            xml.setEnabled(true)
            xml.destination file("${buildDir}/jacoco/report.xml")
            html.setEnabled(true)
            html.destination file("${buildDir}/jacoco/html")
        }
    }

    check.dependsOn jacocoJupTestReport
}